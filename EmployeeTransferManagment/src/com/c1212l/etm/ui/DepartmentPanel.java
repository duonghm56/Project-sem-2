/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.c1212l.etm.ui;

import com.c1212l.etm.bll.DepartmentBUS;
import com.c1212l.etm.bll.LocationBUS;
import com.c1212l.etm.dto.Department;
import com.c1212l.etm.dto.Location;
import com.c1212l.etm.util.KeyValue;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Luu Bi
 */
public class DepartmentPanel extends javax.swing.JPanel {

    /**
     * Creates new form DepartmentPanel
     */
    public DepartmentPanel() {
        try {
            initComponents();
            initCmbLocation();
            initTable();
            lstDepartment = departmentBUS.getAllDepartment();
            fillData(lstDepartment);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ProjectPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ProjectPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDepartmentID = new javax.swing.JTextField();
        txtDepartmentName = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDepartmentData = new javax.swing.JTable();
        cmbLocation = new javax.swing.JComboBox();

        jTextField2.setText("jTextField2");

        setBorder(javax.swing.BorderFactory.createTitledBorder("Department Manager"));
        setPreferredSize(new java.awt.Dimension(970, 550));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Department ID");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 40, -1, -1));

        jLabel2.setText("Department Name");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 100, -1, -1));

        jLabel3.setText("Location");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, -1, -1));

        txtDepartmentID.setEnabled(false);
        add(txtDepartmentID, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 40, 190, 30));

        txtDepartmentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDepartmentNameActionPerformed(evt);
            }
        });
        txtDepartmentName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDepartmentNameKeyReleased(evt);
            }
        });
        add(txtDepartmentName, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 100, 190, 30));

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 220, 60, 40));

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 220, -1, 40));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 220, -1, 40));

        tbDepartmentData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbDepartmentData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDepartmentDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbDepartmentData);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 290, 930, 230));

        cmbLocation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ha Noi", "TP.Ho Chi Minh", " " }));
        add(cmbLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 160, 190, 30));
    }// </editor-fold>//GEN-END:initComponents

    private void txtDepartmentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDepartmentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDepartmentNameActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
       
        try {
             if (txtDepartmentName.getText().equals("")) {
                JOptionPane.showMessageDialog(null, "Please enter department name");
                return;
            }
            Pattern ptDepartName = Pattern.compile("^([A-Za-z]+[\\s]?)+$");
            Matcher mcDepartName = ptDepartName.matcher(txtDepartmentName.getText());
            if (!mcDepartName.find()) {
                 throw new Exception("Department name is not valid");
            }
            departmentBUS.addDepartment(txtDepartmentName.getText(), ((KeyValue) cmbLocation.getSelectedItem()).getKey());
            JOptionPane.showMessageDialog(null, "Insert Success!!!");
            reloadData();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        try {
            if (txtDepartmentID.getText().equals("")) {
                throw new Exception("Please select department");
            }
            if (txtDepartmentName.getText().equals("")) {
                throw new Exception("Please enter department name");
            }
            Pattern ptDepartName = Pattern.compile("^([A-Za-z]+[\\s]?)+$");
            Matcher mcDepartName = ptDepartName.matcher(txtDepartmentName.getText());
            if (!mcDepartName.find()) {
                 throw new Exception("Department name is not valid");
            }
            int locationID = ((KeyValue) cmbLocation.getSelectedItem()).getKey();
            departmentBUS.updateDepartment(Integer.parseInt(txtDepartmentID.getText()), txtDepartmentName.getText(), locationID);
            JOptionPane.showMessageDialog(null, "Update Success!!!");
            reloadData();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error:", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (txtDepartmentID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please select department");
        } else {
            try {
                if (JOptionPane.showConfirmDialog(null, "Are you sure to delete?", "Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    departmentBUS.deleteDepartment(Integer.parseInt(txtDepartmentID.getText()));
                    reloadData();
                }
            } catch (Exception ex) {
                if(ex.getMessage().contains("UNIQUE KEY")){
                    JOptionPane.showMessageDialog(null, "Error: Duplicate value", "Error", JOptionPane.ERROR_MESSAGE);
                }else{
                    JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);                    
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tbDepartmentDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDepartmentDataMouseClicked
        // TODO add your handling code here:
        int row = tbDepartmentData.rowAtPoint(evt.getPoint());
        txtDepartmentID.setText(tbDepartmentData.getValueAt(row, 0).toString());
        txtDepartmentName.setText(tbDepartmentData.getValueAt(row, 1).toString());
        cmbLocation.setSelectedItem(new KeyValue(0, tbDepartmentData.getValueAt(row, 2).toString()));

    }//GEN-LAST:event_tbDepartmentDataMouseClicked

    private void txtDepartmentNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDepartmentNameKeyReleased
        // TODO add your handling code here:
        try {
            searchDepartmentName();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ProjectPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ProjectPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtDepartmentNameKeyReleased

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        
    }//GEN-LAST:event_formComponentShown
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cmbLocation;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTable tbDepartmentData;
    private javax.swing.JTextField txtDepartmentID;
    private javax.swing.JTextField txtDepartmentName;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel tblModel;
    ArrayList<Department> lstDepartment;
    DepartmentBUS departmentBUS = new DepartmentBUS();

    private void initTable() {
        Vector header = new Vector();
        header.add("Department ID");
        header.add("Department Name");
        header.add("Location Name");
        tblModel = new DefaultTableModel(header, 0);
        tbDepartmentData.setModel(tblModel);
    }

    private void fillData(ArrayList<Department> lst) {
        if (lst != null) {
            for (Department d : lst) {
                tblModel.addRow(d.getVector());
            }
        }
    }

    private void reloadData() {
        try {
            initTable();
            fillData(departmentBUS.getAllDepartment());
            initTextField();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ProjectPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(ProjectPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initTextField() {
        txtDepartmentID.setText("");
        txtDepartmentName.setText("");
    }

    private void initCmbLocation() {
        try {
            cmbLocation.removeAllItems();
            LocationBUS locationBUS = new LocationBUS();
            ArrayList<Location> arrLocation = locationBUS.getAllLocation();
            for (Location location : arrLocation) {
                cmbLocation.addItem(new KeyValue(location.getLocationID(), location.getLocationName()));
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DepartmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DepartmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void searchDepartmentName() throws ClassNotFoundException, SQLException {
        String departmentName = "";
        if (!txtDepartmentName.getText().equals("")) {
            if (!departmentName.contains("where")) {
                departmentName += " where departmentName like '%" + txtDepartmentName.getText() + "%'";
            } else {
                departmentName += " and departmentName like '%" + txtDepartmentName.getText() + "%'";
            }
        }
        initTable();
        lstDepartment = departmentBUS.searchDepartmentName(departmentName);
        fillData(lstDepartment);
    }

    @Override
    public void validate() {
        super.validate();
        try {
            initCmbLocation();
            initTable();
            lstDepartment = departmentBUS.getAllDepartment();
            fillData(lstDepartment);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(DepartmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(DepartmentPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    
}
