/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.c1212l.etm.ui_new;

import com.c1212l.etm.bll.DepartmentBUS;
import com.c1212l.etm.bll.LocationBUS;
import com.c1212l.etm.bll.ProjectBUS;
import com.c1212l.etm.bll.TransferBUS;
import com.c1212l.etm.bll.TransferTypeBUS;
import com.c1212l.etm.dal.DepartmentDAO;
import com.c1212l.etm.dal.EmployeeDAO;
import com.c1212l.etm.dal.LocationDAO;
import com.c1212l.etm.dal.TransferDAO;
import com.c1212l.etm.dto.Department;
import com.c1212l.etm.dto.Employee;
import com.c1212l.etm.dto.Location;
import com.c1212l.etm.dto.Transfer;
import com.c1212l.etm.dto.TransferType;
import com.c1212l.etm.report.TransferView;
import com.c1212l.etm.util.KeyValue;
import com.c1212l.etm.util.MyReport;
import com.c1212l.etm.util.MyUtil;
import java.sql.Date;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author DUONGHM
 */
public class PanelTransfer extends javax.swing.JPanel {

    /**
     * Creates new form PanelTransfer
     */
    public PanelTransfer() {
        initComponents();
        reloadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        leftPanel = new javax.swing.JPanel();
        panelInfor = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtLetter = new javax.swing.JTextArea();
        panelTotalInfor = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        lblTotalTransfer = new javax.swing.JLabel();
        lblTotalApprove = new javax.swing.JLabel();
        lblTotalDisapprove = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        lblTotalWaiting = new javax.swing.JLabel();
        rightPanel = new javax.swing.JPanel();
        toolBarButton = new javax.swing.JToolBar();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnApprove = new javax.swing.JButton();
        btnDisapprove = new javax.swing.JButton();
        panelBasicInfor = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNumber = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cmbFromDepartment = new javax.swing.JComboBox();
        jLabel37 = new javax.swing.JLabel();
        cmbFromLocation = new javax.swing.JComboBox();
        jLabel38 = new javax.swing.JLabel();
        cmbFromProject = new javax.swing.JComboBox();
        txtTransferID = new javax.swing.JTextField();
        btnLoadEmpl = new javax.swing.JButton();
        panelTable = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbTransferData = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dcRequestDate = new com.toedter.calendar.JDateChooser();
        dcRelievingDate = new com.toedter.calendar.JDateChooser();
        dcJoiningDate = new com.toedter.calendar.JDateChooser();
        cbRelievingDateUnknown = new javax.swing.JCheckBox();
        cbJoiningDateUnknown = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        cmbToLocation = new javax.swing.JComboBox();
        jLabel14 = new javax.swing.JLabel();
        cmbToDepartment = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        cmbToProject = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        cmbTransferType = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        dcApproveDate = new com.toedter.calendar.JDateChooser();
        cbApproveDateUnknown = new javax.swing.JCheckBox();
        cmbApprove = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cbRequestDateUnknown = new javax.swing.JCheckBox();

        panelInfor.setBorder(javax.swing.BorderFactory.createTitledBorder("Letter"));

        txtLetter.setColumns(20);
        txtLetter.setRows(5);
        jScrollPane3.setViewportView(txtLetter);

        javax.swing.GroupLayout panelInforLayout = new javax.swing.GroupLayout(panelInfor);
        panelInfor.setLayout(panelInforLayout);
        panelInforLayout.setHorizontalGroup(
            panelInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        panelInforLayout.setVerticalGroup(
            panelInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelInforLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelTotalInfor.setBorder(javax.swing.BorderFactory.createTitledBorder("Total Information"));

        jLabel29.setText("Total Transfer");

        jLabel30.setText("Total Approve");

        jLabel31.setText("Total Disapprove");

        lblTotalTransfer.setText("jLabel32");

        lblTotalApprove.setText("jLabel33");

        lblTotalDisapprove.setText("jLabel34");

        jLabel35.setText("Total Waiting Approve");

        lblTotalWaiting.setText("jLabel36");

        javax.swing.GroupLayout panelTotalInforLayout = new javax.swing.GroupLayout(panelTotalInfor);
        panelTotalInfor.setLayout(panelTotalInforLayout);
        panelTotalInforLayout.setHorizontalGroup(
            panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalInforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel30)
                    .addComponent(jLabel31)
                    .addComponent(jLabel35))
                .addGap(18, 18, 18)
                .addGroup(panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTotalWaiting)
                    .addComponent(lblTotalDisapprove)
                    .addComponent(lblTotalApprove)
                    .addComponent(lblTotalTransfer))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        panelTotalInforLayout.setVerticalGroup(
            panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTotalInforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(lblTotalTransfer))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(lblTotalApprove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(lblTotalDisapprove))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTotalInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(lblTotalWaiting))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout leftPanelLayout = new javax.swing.GroupLayout(leftPanel);
        leftPanel.setLayout(leftPanelLayout);
        leftPanelLayout.setHorizontalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelTotalInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        leftPanelLayout.setVerticalGroup(
            leftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelInfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTotalInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(leftPanel);

        toolBarButton.setRollover(true);

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/new1_32.png"))); // NOI18N
        btnAdd.setText("New");
        btnAdd.setFocusable(false);
        btnAdd.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnAdd.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        toolBarButton.add(btnAdd);

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/save_32.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setFocusable(false);
        btnUpdate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        toolBarButton.add(btnUpdate);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/delete_32.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        toolBarButton.add(btnDelete);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/1380633043_gtk-cancel.png"))); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        toolBarButton.add(btnRefresh);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/find.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.setFocusable(false);
        btnSearch.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnSearch.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        toolBarButton.add(btnSearch);

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/printer_32.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.setFocusable(false);
        btnPrint.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnPrint.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        toolBarButton.add(btnPrint);

        btnApprove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/badge_tick.png"))); // NOI18N
        btnApprove.setText("Approve");
        btnApprove.setFocusable(false);
        btnApprove.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnApprove.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });
        toolBarButton.add(btnApprove);

        btnDisapprove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/delete1.png"))); // NOI18N
        btnDisapprove.setText("Disapprove");
        btnDisapprove.setFocusable(false);
        btnDisapprove.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnDisapprove.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDisapprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisapproveActionPerformed(evt);
            }
        });
        toolBarButton.add(btnDisapprove);

        panelBasicInfor.setBorder(javax.swing.BorderFactory.createTitledBorder("Employee Information"));

        jLabel1.setText("Employee Number");

        jLabel2.setText("Employee Name");

        jLabel13.setText("Department");

        cmbFromDepartment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFromDepartmentItemStateChanged(evt);
            }
        });

        jLabel37.setText("Location");

        cmbFromLocation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFromLocationItemStateChanged(evt);
            }
        });

        jLabel38.setText("Project");

        cmbFromProject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFromProjectItemStateChanged(evt);
            }
        });

        txtTransferID.setPreferredSize(new java.awt.Dimension(0, 0));

        btnLoadEmpl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image_new/next-icon.png"))); // NOI18N
        btnLoadEmpl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadEmplActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBasicInforLayout = new javax.swing.GroupLayout(panelBasicInfor);
        panelBasicInfor.setLayout(panelBasicInforLayout);
        panelBasicInforLayout.setHorizontalGroup(
            panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBasicInforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBasicInforLayout.createSequentialGroup()
                        .addComponent(txtNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLoadEmpl, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtTransferID, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel38)
                    .addComponent(jLabel13)
                    .addComponent(jLabel37))
                .addGap(18, 18, 18)
                .addGroup(panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbFromLocation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFromDepartment, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFromProject, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        panelBasicInforLayout.setVerticalGroup(
            panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBasicInforLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbFromLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel37))
                    .addComponent(btnLoadEmpl, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(cmbFromDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBasicInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(cmbFromProject, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTransferID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        panelTable.setBorder(javax.swing.BorderFactory.createTitledBorder("List Transfer"));

        tbTransferData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbTransferData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbTransferDataMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbTransferData);

        javax.swing.GroupLayout panelTableLayout = new javax.swing.GroupLayout(panelTable);
        panelTable.setLayout(panelTableLayout);
        panelTableLayout.setHorizontalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTableLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelTableLayout.setVerticalGroup(
            panelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTableLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Transfer Information"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setText("Request Date");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, -1));

        jLabel4.setText("Relieving Date");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel5.setText("Joining Date");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, -1));
        jPanel1.add(dcRequestDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, -1, -1));
        jPanel1.add(dcRelievingDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, -1, -1));
        jPanel1.add(dcJoiningDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, -1, -1));
        jPanel1.add(cbRelievingDateUnknown, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 70, 20, -1));
        jPanel1.add(cbJoiningDateUnknown, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 100, 20, -1));

        jLabel15.setText("To Location");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 30, -1, -1));

        cmbToLocation.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbToLocationItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbToLocation, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 166, -1));

        jLabel14.setText("To Department ");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, -1, -1));

        cmbToDepartment.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbToDepartmentItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbToDepartment, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 60, 166, -1));

        jLabel11.setText("To Project");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 90, -1, -1));

        cmbToProject.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbToProjectItemStateChanged(evt);
            }
        });
        jPanel1.add(cmbToProject, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 90, 165, -1));

        jLabel6.setText("Transfer Type");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 120, -1, -1));

        jPanel1.add(cmbTransferType, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 120, 160, -1));

        jLabel7.setText("ApproveDate");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, -1, -1));
        jPanel1.add(dcApproveDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 130, -1, -1));
        jPanel1.add(cbApproveDateUnknown, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 20, -1));

        cmbApprove.setEnabled(false);
        jPanel1.add(cmbApprove, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 150, 160, -1));

        jLabel8.setText("Approve");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 150, -1, -1));
        jPanel1.add(cbRequestDateUnknown, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 40, 20, -1));

        javax.swing.GroupLayout rightPanelLayout = new javax.swing.GroupLayout(rightPanel);
        rightPanel.setLayout(rightPanelLayout);
        rightPanelLayout.setHorizontalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightPanelLayout.createSequentialGroup()
                .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(toolBarButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(rightPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelBasicInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 602, Short.MAX_VALUE)
                            .addComponent(panelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        rightPanelLayout.setVerticalGroup(
            rightPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightPanelLayout.createSequentialGroup()
                .addComponent(toolBarButton, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelBasicInfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(rightPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 850, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 519, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFromDepartmentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFromDepartmentItemStateChanged
    }//GEN-LAST:event_cmbFromDepartmentItemStateChanged

    private void cmbFromLocationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFromLocationItemStateChanged
    }//GEN-LAST:event_cmbFromLocationItemStateChanged

    private void cmbFromProjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFromProjectItemStateChanged
    }//GEN-LAST:event_cmbFromProjectItemStateChanged

    private void cmbToLocationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbToLocationItemStateChanged
    }//GEN-LAST:event_cmbToLocationItemStateChanged

    private void cmbToDepartmentItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbToDepartmentItemStateChanged
        updateCmbLocationByCmbDepartment();
        updateCmbTransferType();
    }//GEN-LAST:event_cmbToDepartmentItemStateChanged

    private void cmbToProjectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbToProjectItemStateChanged
        updateCmbTransferType();
    }//GEN-LAST:event_cmbToProjectItemStateChanged

    private void tbTransferDataMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbTransferDataMouseReleased
        updateFieldWhenSelectTransfer();
    }//GEN-LAST:event_tbTransferDataMouseReleased

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (txtTransferID.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please select Transfer ID");
        } else {
            try {
                if (JOptionPane.showConfirmDialog(null, "Are you sure to delete?", "Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.OK_OPTION) {
                    transferBUS.deleteTransfer(Integer.parseInt(txtTransferID.getText()));
                    reloadData();
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try {
            if (txtTransferID.getText().equals("")) {
                throw new Exception("Please select Transfer ID");
            }
            int transferID = Integer.parseInt(txtTransferID.getText());
            int transferTypeID = ((KeyValue) cmbTransferType.getSelectedItem()).getKey();
            /*
             Date requestDate = Date.valueOf(txtRequestDate.getText());
             String reason = txtReason.getText();
             Date approveDate = Date.valueOf(txtApproveDate.getText());
             int approve = ((KeyValue) cmbApprove.getSelectedItem()).getKey();
             */
            String relDate = MyUtil.getDateStr(dcRelievingDate, cbRelievingDateUnknown);
            String joinDate = MyUtil.getDateStr(dcJoiningDate, cbJoiningDateUnknown);
            int fromProjectID = ((KeyValue) cmbFromProject.getSelectedItem()).getKey();
            int toProjectID = ((KeyValue) cmbToProject.getSelectedItem()).getKey();
            int fromDepartmentID = ((KeyValue) cmbFromDepartment.getSelectedItem()).getKey();
            int toDepartmentID = ((KeyValue) cmbToDepartment.getSelectedItem()).getKey();
            int formLocationID = ((KeyValue) cmbFromLocation.getSelectedItem()).getKey();
            int toLocationID = ((KeyValue) cmbToLocation.getSelectedItem()).getKey();

            int approve = ((KeyValue) cmbApprove.getSelectedItem()).getKey();

            transferBUS.updateTransfer(transferID, transferTypeID, relDate, joinDate, fromProjectID, toProjectID, fromDepartmentID, toDepartmentID, formLocationID, toLocationID, approve);

            reloadData();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        try {
            int transferID = Integer.parseInt(txtTransferID.getText());
            transferBUS.approveTransfer(transferID);
            reloadData();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnDisapproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisapproveActionPerformed
        try {
            int transferID = Integer.parseInt(txtTransferID.getText());
            transferBUS.disapproveTransfer(transferID);
            reloadData();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnDisapproveActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        reloadData();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        loadSearchData();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            validateField();
            String emplNum = txtNumber.getText();
            int transferTypeID = ((KeyValue) cmbTransferType.getSelectedItem()).getKey();
            Date requestDate = MyUtil.getDate(dcRequestDate, cbRequestDateUnknown);
            Date relievingDate = MyUtil.getDate(dcRelievingDate, cbRelievingDateUnknown);
            Date joingingDate = MyUtil.getDate(dcJoiningDate, cbJoiningDateUnknown);
            Date approveDate = MyUtil.getDate(dcApproveDate, cbApproveDateUnknown);
            int fromProjectID = ((KeyValue) cmbFromProject.getSelectedItem()).getKey();
            int toProjectID = ((KeyValue) cmbToProject.getSelectedItem()).getKey();
            int fromDepartmentID = ((KeyValue) cmbFromDepartment.getSelectedItem()).getKey();
            int toDepartmentID = ((KeyValue) cmbToDepartment.getSelectedItem()).getKey();
            int formLocationID = ((KeyValue) cmbFromLocation.getSelectedItem()).getKey();
            int toLocationID = ((KeyValue) cmbToLocation.getSelectedItem()).getKey();
            transferBUS.makeNewTransfer(emplNum, transferTypeID, requestDate, relievingDate, joingingDate, approveDate, fromProjectID, toProjectID, fromDepartmentID, toDepartmentID, formLocationID, toLocationID);
            reloadData();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnLoadEmplActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadEmplActionPerformed
        try {
            EmployeeDAO employeeDAO = new EmployeeDAO();
            Employee empl = employeeDAO.getEmployeeByNumber(txtNumber.getText());
            txtName.setText(empl.getEmployeeName());
            cmbFromLocation.setSelectedItem(new KeyValue(0, empl.getEmployeeLocation()));
            cmbFromDepartment.setSelectedItem(new KeyValue(0, empl.getEmployeeDepartment()));
            cmbFromProject.setSelectedItem(new KeyValue(0, empl.getEmployeeProject()));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Cannot find this employee in database", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoadEmplActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        try {
            ArrayList<TransferView> lstTransferViews = new ArrayList<TransferView>();
            for (int i = 0; i < lstTransfer.size(); i++) {
                lstTransferViews.add(lstTransfer.get(i).getTransferView());
            }
            HashMap map = new HashMap();
            JRBeanCollectionDataSource datasource = new JRBeanCollectionDataSource(lstTransferViews);
            MyReport myReport = new MyReport("src\\com\\c1212l\\etm\\report\\report1.jasper", map, datasource);
            myReport.getFrameReport().setVisible(true);
            //System.out.println(lstTransferViews.size());
            //JasperPrint jrPrint = JasperFillManager.fillReport("src\\com\\c1212l\\etm\\report\\report1.jasper", map, datasource);
            //JasperViewer.viewReport(jrPrint);
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnPrintActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDisapprove;
    private javax.swing.JButton btnLoadEmpl;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JCheckBox cbApproveDateUnknown;
    private javax.swing.JCheckBox cbJoiningDateUnknown;
    private javax.swing.JCheckBox cbRelievingDateUnknown;
    private javax.swing.JCheckBox cbRequestDateUnknown;
    private javax.swing.JComboBox cmbApprove;
    private javax.swing.JComboBox cmbFromDepartment;
    private javax.swing.JComboBox cmbFromLocation;
    private javax.swing.JComboBox cmbFromProject;
    private javax.swing.JComboBox cmbToDepartment;
    private javax.swing.JComboBox cmbToLocation;
    private javax.swing.JComboBox cmbToProject;
    private javax.swing.JComboBox cmbTransferType;
    private com.toedter.calendar.JDateChooser dcApproveDate;
    private com.toedter.calendar.JDateChooser dcJoiningDate;
    private com.toedter.calendar.JDateChooser dcRelievingDate;
    private com.toedter.calendar.JDateChooser dcRequestDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblTotalApprove;
    private javax.swing.JLabel lblTotalDisapprove;
    private javax.swing.JLabel lblTotalTransfer;
    private javax.swing.JLabel lblTotalWaiting;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel panelBasicInfor;
    private javax.swing.JPanel panelInfor;
    private javax.swing.JPanel panelTable;
    private javax.swing.JPanel panelTotalInfor;
    private javax.swing.JPanel rightPanel;
    private javax.swing.JTable tbTransferData;
    private javax.swing.JToolBar toolBarButton;
    private javax.swing.JTextArea txtLetter;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNumber;
    private javax.swing.JTextField txtTransferID;
    // End of variables declaration//GEN-END:variables
    DefaultTableModel tblModel;
    ArrayList<Transfer> lstTransfer;
    TransferBUS transferBUS = new TransferBUS();

    private void initTable() {
        Vector header = new Vector();
        header = new Vector();
        //---Ko hien thi
        header.add("ID");
        header.add("Type");
        //------------------------------------
        header.add("EmplNumber");
        header.add("Name");
        //---Ko hien thi        
        header.add("Relieving Date");
        header.add("Joining Date");
        header.add("Request Date");
        header.add("Reason");
        header.add("Approve Date");
        //------------------------------------        
        header.add("From Project");
        header.add("To Project");
        header.add("From Department");
        header.add("To Department");
        header.add("From Location");
        header.add("To Location");
        header.add("Appove");
        header.add("Letter");
        tblModel = new DefaultTableModel(header, 0);
        tbTransferData.setModel(tblModel);

        makeInvisibleColumn(0);
        makeInvisibleColumn(1);
        makeInvisibleColumn(3);
        makeInvisibleColumn(4);
        makeInvisibleColumn(5);
        makeInvisibleColumn(6);
        makeInvisibleColumn(7);
        makeInvisibleColumn(13);
        makeInvisibleColumn(14);
        makeInvisibleColumn(16);

    }

    private void makeInvisibleColumn(int col) {
        tbTransferData.getColumnModel().getColumn(col).setMaxWidth(0);
        tbTransferData.getColumnModel().getColumn(col).setMinWidth(0);
        tbTransferData.getColumnModel().getColumn(col).setPreferredWidth(0);
        tbTransferData.getColumnModel().getColumn(col).setResizable(false);
    }

    private void fillData(ArrayList<Transfer> lst) {
        if (lst != null) {
            for (Transfer transfer : lst) {
                tblModel.addRow(transfer.getVector());
            }
        }
    }

    private void initCmbTransferType() throws ClassNotFoundException, SQLException {
        cmbTransferType.removeAllItems();
        cmbTransferType.addItem(new KeyValue(-1, ""));
        TransferTypeBUS transferTypeBUS = new TransferTypeBUS();
        ArrayList<TransferType> arrTransferType = transferTypeBUS.getAllTransferType();
        for (TransferType transferType : arrTransferType) {
            cmbTransferType.addItem(new KeyValue(transferType.getTransferTypeID(), transferType.getTransferTypeName()));
        }
    }

    private void initCmbFromProject() throws ClassNotFoundException, SQLException {
        cmbFromProject.removeAllItems();
        cmbFromProject.addItem(new KeyValue(-1, ""));
        ProjectBUS projectBUS = new ProjectBUS();
        ArrayList<com.c1212l.etm.dto.Project> arrProject = projectBUS.getAllProject();
        for (com.c1212l.etm.dto.Project p : arrProject) {
            cmbFromProject.addItem(new KeyValue(p.getProjectID(), p.getProjectName()));
        }
    }

    private void initCmbToProject() throws ClassNotFoundException, SQLException {
        cmbToProject.removeAllItems();
        cmbToProject.addItem(new KeyValue(-1, ""));
        ProjectBUS projectBUS = new ProjectBUS();
        ArrayList<com.c1212l.etm.dto.Project> arrProject = projectBUS.getAllProject();
        for (com.c1212l.etm.dto.Project p : arrProject) {
            cmbToProject.addItem(new KeyValue(p.getProjectID(), p.getProjectName()));
        }
    }

    private void initCmbFromLocation() throws ClassNotFoundException, SQLException {
        cmbFromLocation.removeAllItems();
        cmbFromLocation.addItem(new KeyValue(-1, ""));
        LocationBUS locationBUS = new LocationBUS();
        ArrayList<Location> arrLocation = locationBUS.getAllLocation();
        for (Location location : arrLocation) {
            cmbFromLocation.addItem(new KeyValue(location.getLocationID(), location.getLocationName()));
        }
    }

    private void initCmbToLocation() throws ClassNotFoundException, SQLException {
        cmbToLocation.removeAllItems();
        cmbToLocation.addItem(new KeyValue(-1, ""));
        LocationBUS locationBUS = new LocationBUS();
        ArrayList<Location> arrLocation = locationBUS.getAllLocation();
        for (Location location : arrLocation) {
            cmbToLocation.addItem(new KeyValue(location.getLocationID(), location.getLocationName()));
        }
    }

    private void initCmbFromDepartment() throws ClassNotFoundException, SQLException {
        cmbFromDepartment.removeAllItems();
        cmbFromDepartment.addItem(new KeyValue(-1, ""));
        DepartmentBUS departmentBUS = new DepartmentBUS();
        LocationDAO locationDAO = new LocationDAO();
        ArrayList<Department> arrDepartment = departmentBUS.getAllDepartment();
        for (Department department : arrDepartment) {
            Location location = locationDAO.getLocationById(department.getLocationID());
            cmbFromDepartment.addItem(new KeyValue(
                    department.getDepartmentID(),
                    department.getDepartmentName() + " - " + location.getLocationName()));
        }
    }

    private void initCmbToDepartment() throws ClassNotFoundException, SQLException {
        cmbToDepartment.removeAllItems();
        cmbToDepartment.addItem(new KeyValue(-1, ""));
        DepartmentBUS departmentBUS = new DepartmentBUS();
        LocationDAO locationDAO = new LocationDAO();
        ArrayList<Department> arrDepartment = departmentBUS.getAllDepartment();
        for (Department department : arrDepartment) {
            Location location = locationDAO.getLocationById(department.getLocationID());
            cmbToDepartment.addItem(new KeyValue(
                    department.getDepartmentID(),
                    department.getDepartmentName() + " - " + location.getLocationName()));
        }
    }

    private void initCmbApprove() {
        cmbApprove.removeAllItems();
        cmbToDepartment.addItem(new KeyValue(-1, ""));
        cmbApprove.addItem(new KeyValue(1, "Approve"));
        cmbApprove.addItem(new KeyValue(2, "Disapprove"));
        cmbApprove.addItem(new KeyValue(3, "Waiting Approve"));
    }

    private void initTextfield() {
        txtName.setText("");
        txtNumber.setText("");
        txtTransferID.setText("");
        txtLetter.setText("");
    }

    private void initRequestDate() {
        dcRequestDate.setDate(new java.util.Date());
        cbRequestDateUnknown.setSelected(false);
    }

    private void initRelievingDate() {
        dcRelievingDate.setDate(new java.util.Date());
        cbRelievingDateUnknown.setSelected(false);
    }

    private void initJoiningDate() {
        dcJoiningDate.setDate(new java.util.Date());
        cbJoiningDateUnknown.setSelected(false);
    }

    private void initApproveDate() {
        dcApproveDate.setDate(new java.util.Date());
        cbApproveDateUnknown.setSelected(false);
    }

    private void initAllDate() {
        initRequestDate();
        initRelievingDate();
        initJoiningDate();
        initApproveDate();
    }

    private void initLabel() throws ClassNotFoundException, SQLException {
        TransferDAO transferDAO = new TransferDAO();
        lblTotalTransfer.setText("" + transferDAO.getTotalNumberTransfer());
        lblTotalApprove.setText("" + transferDAO.getTotalApproveNumberTransfer());
        lblTotalDisapprove.setText("" + transferDAO.getTotalDisapproveNumberTransfer());
        lblTotalWaiting.setText("" + transferDAO.getTotalWaitapproveNumberTransfer());
    }

    private void reloadData() {
        try {
            initLabel();
            initAllDate();
            initTextfield();
            initTable();
            initCmbTransferType();
            initCmbFromProject();
            initCmbToProject();
            initCmbFromDepartment();
            initCmbToDepartment();
            initCmbFromLocation();
            initCmbToLocation();
            initCmbApprove();
            //convertDate();    
            lstTransfer = transferBUS.getAllTransfer();
            fillData(lstTransfer);
//            initTextField();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private String checkFieldAndReturnTransferType() {
        try {
            int fromProjectID = ((KeyValue) cmbFromProject.getSelectedItem()).getKey();
            int toProjectID = ((KeyValue) cmbToProject.getSelectedItem()).getKey();
            int fromDepartmentID = ((KeyValue) cmbFromDepartment.getSelectedItem()).getKey();
            int toDepartmentID = ((KeyValue) cmbToDepartment.getSelectedItem()).getKey();
            int fromLocationID = ((KeyValue) cmbFromLocation.getSelectedItem()).getKey();
            int toLocationID = ((KeyValue) cmbToLocation.getSelectedItem()).getKey();

            int[] check = {0, 0, 0};

            if (fromProjectID != toProjectID) {
                check[0] = 1;
            }
            if (fromDepartmentID != toDepartmentID) {
                check[1] = 1;
            }
            if (fromLocationID != toLocationID) {
                check[2] = 1;
            }

            int sum = 0;
            for (int i = 0; i < check.length; i++) {
                sum += check[i];
            }

            if (sum == 0) {
                //Error: No transfer ?
                return "";
            } else if (sum == 1) {
                //Transfer only one
                if (check[0] == 1) {
                    //Project
                    return "Project Transfer";
                }
                if (check[1] == 1) {
                    //Department
                    return "Department Transfer";
                }
                if (check[2] == 1) {
                    //Location
                    return "Location Transfer";
                }
                //Unexpected Error
                return "";
            } else {
                //Custom transfer
                return "Custom Transfer";
            }
        } catch (Exception ex) {
            return "";
        }
    }

    private void updateCmbTransferType() {
        cmbTransferType.setSelectedItem(new KeyValue(0, checkFieldAndReturnTransferType()));
    }

    private void updateFieldWhenSelectTransfer() {
        //boolean oldSearchMode = isSearchMode;
        //isSearchMode = false;
        int row = tbTransferData.getSelectedRow();

        txtTransferID.setText(tbTransferData.getValueAt(row, 0).toString());
        cmbTransferType.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 1).toString()));
        txtNumber.setText(tbTransferData.getValueAt(row, 2).toString());
        txtName.setText(tbTransferData.getValueAt(row, 3).toString());

        if (tbTransferData.getValueAt(row, 4) == null) {
            cbRelievingDateUnknown.setSelected(true);
        } else {
            cbRelievingDateUnknown.setSelected(false);
            dcRelievingDate.setDate(Date.valueOf(tbTransferData.getValueAt(row, 4).toString()));
        }

        if (tbTransferData.getValueAt(row, 5) == null) {
            cbJoiningDateUnknown.setSelected(true);
        } else {
            cbJoiningDateUnknown.setSelected(false);
            dcJoiningDate.setDate(Date.valueOf(tbTransferData.getValueAt(row, 5).toString()));
        }


        if (tbTransferData.getValueAt(row, 6) == null) {
            cbRequestDateUnknown.setSelected(true);
        } else {
            cbRequestDateUnknown.setSelected(false);
            dcRequestDate.setDate(Date.valueOf(tbTransferData.getValueAt(row, 6).toString()));
        }


        if (tbTransferData.getValueAt(row, 8) == null) {
            cbApproveDateUnknown.setSelected(true);
        } else {
            cbApproveDateUnknown.setSelected(false);
            dcApproveDate.setDate(Date.valueOf(tbTransferData.getValueAt(row, 8).toString()));
        }


        cmbFromProject.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 9).toString()));
        cmbToProject.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 10).toString()));
        cmbFromDepartment.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 11).toString()));
        System.out.println(tbTransferData.getValueAt(row, 11).toString());
        cmbToDepartment.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 12).toString()));
        cmbFromLocation.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 13).toString()));
        cmbToLocation.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 14).toString()));
        cmbApprove.setSelectedItem(new KeyValue(0, tbTransferData.getValueAt(row, 15).toString()));

        txtLetter.setText(tbTransferData.getValueAt(row, 16) == null ? "" : tbTransferData.getValueAt(row, 16).toString());
        String approve = tbTransferData.getValueAt(row, 15).toString();

        btnApprove.setVisible(approve.equals("Waiting Approve"));
        btnDisapprove.setVisible(approve.equals("Waiting Approve"));



        updateCmbTransferType();
    }

    private void updateCmbLocationByCmbDepartment() {
        if (cmbToDepartment.getSelectedItem() != null) {
            int toDepartmentID = ((KeyValue) cmbToDepartment.getSelectedItem()).getKey();
            DepartmentDAO departmentDAO = new DepartmentDAO();
            Department department = departmentDAO.getDepartmentByID(toDepartmentID);
            if (department != null) {
                LocationDAO locationDAO = new LocationDAO();
                Location location = locationDAO.getLocationById(department.getLocationID());
                cmbToLocation.setSelectedItem(new KeyValue(location.getLocationID(), location.getLocationName()));
            } else {
                cmbToLocation.setSelectedItem(new KeyValue(-1, ""));
            }
        }
    }

    private void loadSearchData() {

        String condition = "";
        try {

            if (!txtNumber.getText().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where employeeNumber like '%" + txtNumber.getText() + "%' ";
                } else {
                    condition += " and employeeNumber like '%" + txtNumber.getText() + "%' ";
                }
            }

            if (!txtName.getText().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where employeeName like '%" + txtName.getText() + "%' ";
                } else {
                    condition += " and employeeName like '%" + txtName.getText() + "%' ";
                }
            }

            KeyValue fromProject = (KeyValue) cmbFromProject.getSelectedItem();
            if (fromProject != null && !fromProject.getValue().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where fromProjectID = " + fromProject.getKey() + " ";
                } else {
                    condition += " and fromProjectID = " + fromProject.getKey() + " ";
                }
            }

            KeyValue toProject = (KeyValue) cmbToProject.getSelectedItem();
            if (toProject != null && !toProject.getValue().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where toProjectID = " + toProject.getKey() + " ";
                } else {
                    condition += " and toProjectID = " + toProject.getKey() + " ";
                }
            }

            KeyValue fromDepartment = (KeyValue) cmbFromDepartment.getSelectedItem();
            if (fromDepartment != null && !fromDepartment.getValue().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where fromDepartmentID = " + fromDepartment.getKey() + " ";
                } else {
                    condition += " and fromDepartmentID = " + fromDepartment.getKey() + " ";
                }
            }

            KeyValue toDepartment = (KeyValue) cmbToDepartment.getSelectedItem();
            if (toDepartment != null && !toDepartment.getValue().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where toDepartmentID = " + toDepartment.getKey() + " ";
                } else {
                    condition += " and toDepartmentID = " + toDepartment.getKey() + " ";
                }
            }


            KeyValue fromLocation = (KeyValue) cmbFromLocation.getSelectedItem();
            if (fromLocation != null && !fromLocation.getValue().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where fromLocationID = " + fromLocation.getKey() + " ";
                } else {
                    condition += " and fromLocationID = " + fromLocation.getKey() + " ";
                }
            }

            KeyValue toLocation = (KeyValue) cmbToLocation.getSelectedItem();
            if (toLocation != null && !toLocation.getValue().equals("")) {
                if (!condition.contains("where")) {
                    condition += " where toLocationID = " + toLocation.getKey() + "";
                } else {
                    condition += " and toLocationID = " + toLocation.getKey() + "";
                }
            }

            //JOptionPane.showMessageDialog(null, condition);

            initTable();
            lstTransfer = transferBUS.searchTransfer(condition);
            fillData(lstTransfer);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
            ex.printStackTrace();
        }

    }

    private void validateField() throws Exception {
        if (txtNumber.getText().equals("")) {
            throw new Exception("Please enter Employee Number");
        }

        KeyValue department = (KeyValue) cmbFromDepartment.getSelectedItem();
        if (department.getValue().equals("")) {
            throw new Exception("Please select Department");
        }

        KeyValue toDepartment = (KeyValue) cmbToDepartment.getSelectedItem();
        if (toDepartment.getValue().equals("")) {
            throw new Exception("Please select To Department");
        }

        KeyValue location = (KeyValue) cmbFromLocation.getSelectedItem();
        if (location.getValue().equals("")) {
            throw new Exception("Please select Location");
        }

        KeyValue toLocation = (KeyValue) cmbToLocation.getSelectedItem();
        if (toLocation.getValue().equals("")) {
            throw new Exception("Please select To Location");
        }

        KeyValue project = (KeyValue) cmbFromProject.getSelectedItem();
        if (project.getValue().equals("")) {
            throw new Exception("Please select Project");
        }

        KeyValue toProject = (KeyValue) cmbToLocation.getSelectedItem();
        if (toProject.getValue().equals("")) {
            throw new Exception("Please select To Project");
        }

    }

    @Override
    public void validate() {
        super.validate();
        reloadData();
    }
}
